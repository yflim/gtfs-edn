{:feed-files
 ({:file-name "agency.txt",
   :presence "Required",
   :description
   "Transit agencies with service represented in this dataset."}
  {:file-name "stops.txt",
   :presence "Required",
   :description
   "Stops where vehicles pick up or drop off riders. Also defines stations and station entrances."}
  {:file-name "routes.txt",
   :presence "Required",
   :description
   "Transit routes. A route is a group of trips that are displayed to riders as a single service."}
  {:file-name "trips.txt",
   :presence "Required",
   :description
   "Trips for each route. A trip is a sequence of two or more stops that occur during a specific time period."}
  {:file-name "stop_times.txt",
   :presence "Required",
   :description
   "Times that a vehicle arrives at and departs from stops for each trip."}
  {:file-name "calendar.txt",
   :presence "Conditionally Required",
   :description
   "Service dates specified using a weekly schedule with start and end dates.",
   :presence-conditions
   {:required
    "unless all dates of service are defined in calendar_dates.txt.",
    :optional "otherwise."}}
  {:file-name "calendar_dates.txt",
   :presence "Conditionally Required",
   :description
   "Exceptions for the services defined in the calendar.txt.",
   :presence-conditions
   {:required
    "if calendar.txt is omitted. In which case calendar_dates.txt must contain all dates of service.",
    :optional "otherwise."}}
  {:file-name "fare_attributes.txt",
   :presence "Optional",
   :description "Fare information for a transit agency's routes."}
  {:file-name "fare_rules.txt",
   :presence "Conditionally Required",
   :description "Rules to apply fares for itineraries.",
   :presence-conditions
   {:required "if fare_attributes.txt is defined.",
    :forbidden "otherwise."}}
  {:file-name "fare_products.txt",
   :presence "Optional",
   :description
   "To describe the different types of tickets or fares that can be purchased by riders.File fare_products.txt describes fare products that are not represented in fare_attributes.txt and fare_rules.txt. As such, the use of fare_products.txt is entirely separate from files fare_attributes.txt and fare_rules.txt."}
  {:file-name "fare_leg_rules.txt",
   :presence "Optional",
   :description
   "Fare rules for individual legs of travel.File fare_leg_rules.txt provides a more detailed method for modeling fare structures. As such, the use of fare_leg_rules.txt is entirely separate from files fare_attributes.txt and fare_rules.txt."}
  {:file-name "fare_transfer_rules.txt",
   :presence "Optional",
   :description
   "Fare rules for transfers between legs of travel.Along with fare_leg_rules.txt, file fare_transfer_rules.txt provides a more detailed method for modeling fare structures. As such, the use of fare_transfer_rules.txt is entirely separate from files fare_attributes.txt and fare_rules.txt."}
  {:file-name "areas.txt",
   :presence "Optional",
   :description "Area grouping of locations."}
  {:file-name "stop_areas.txt",
   :presence "Optional",
   :description "Rules to assign stops to areas."}
  {:file-name "shapes.txt",
   :presence "Optional",
   :description
   "Rules for mapping vehicle travel paths, sometimes referred to as route alignments."}
  {:file-name "frequencies.txt",
   :presence "Optional",
   :description
   "Headway (time between trips) for headway-based service or a compressed representation of fixed-schedule service."}
  {:file-name "transfers.txt",
   :presence "Optional",
   :description
   "Rules for making connections at transfer points between routes."}
  {:file-name "pathways.txt",
   :presence "Optional",
   :description "Pathways linking together locations within stations."}
  {:file-name "levels.txt",
   :presence "Conditionally Required",
   :description "Levels within stations.",
   :presence-conditions
   {:required
    "when describing pathways with elevators (pathway_mode=5).",
    :optional "otherwise."}}
  {:file-name "translations.txt",
   :presence "Optional",
   :description "Translations of customer-facing dataset values."}
  {:file-name "feed_info.txt",
   :presence "Optional",
   :description
   "Dataset metadata, including publisher, version, and expiration information."}
  {:file-name "attributions.txt",
   :presence "Optional",
   :description "Dataset attributions."}),
 :field-definitions
 ({:file-name "agency.txt",
   :primary-key ["agency_id"],
   :fields
   ({:field-name "agency_id",
     :type "Unique ID",
     :presence "Conditionally Required",
     :description
     "Identifies a transit brand which is often synonymous with a transit agency. Note that in some cases, such as when a single agency operates multiple separate services, agencies and brands are distinct. This document uses the term \"agency\" in place of \"brand\". A dataset may contain data from multiple agencies.",
     :presence-conditions
     {:required
      "when the dataset contains data for multiple transit agencies.",
      :optional "otherwise."},
     :unique true}
    {:field-name "agency_name",
     :type "Text",
     :presence "Required",
     :description "Full name of the transit agency."}
    {:field-name "agency_url",
     :type "URL",
     :presence "Required",
     :description "URL of the transit agency."}
    {:field-name "agency_timezone",
     :type "Timezone",
     :presence "Required",
     :description
     "Timezone where the transit agency is located. If multiple agencies are specified in the dataset, each must have the same agency_timezone."}
    {:field-name "agency_lang",
     :type "Language code",
     :presence "Optional",
     :description
     "Primary language used by this transit agency. Should be provided to help GTFS consumers choose capitalization rules and other language-specific settings for the dataset."}
    {:field-name "agency_phone",
     :type "Phone number",
     :presence "Optional",
     :description
     "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It may contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's \"503-238-RIDE\") is permitted, but the field must not contain any other descriptive text."}
    {:field-name "agency_fare_url",
     :type "URL",
     :presence "Optional",
     :description
     "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online."}
    {:field-name "agency_email",
     :type "Email",
     :presence "Optional",
     :description
     "Email address actively monitored by the agency’s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency."})}
  {:file-name "stops.txt",
   :primary-key ["stop_id"],
   :fields
   ({:field-name "stop_id",
     :type "Unique ID",
     :presence "Required",
     :description
     "Identifies a location: stop/platform, station, entrance/exit, generic node or boarding area (see location_type). Multiple routes may use the same stop_id.",
     :unique true}
    {:field-name "stop_code",
     :type "Text",
     :presence "Optional",
     :description
     "Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location. The stop_code may be the same as stop_id if it is public facing. This field should be left empty for locations without a code presented to riders."}
    {:field-name "stop_name",
     :type "Text",
     :presence "Conditionally Required",
     :description
     "Name of the location. The stop_name should match the agency's rider-facing name for the location as printed on a timetable, published online, or represented on signage. For translations into other languages, use translations.txt.When the location is a boarding area (location_type=4), the stop_name should contains the name of the boarding area as displayed by the agency. It could be just one letter (like on some European intercity railway stations), or text like “Wheelchair boarding area” (NYC’s Subway) or “Head of short trains” (Paris’ RER).",
     :presence-conditions
     {:required
      "for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).",
      :optional
      "for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."}}
    {:field-name "tts_stop_name",
     :type "Text",
     :presence "Optional",
     :description
     "Readable version of the stop_name. See \"Text-to-speech field\" in the Term Definitions for more."}
    {:field-name "stop_desc",
     :type "Text",
     :presence "Optional",
     :description
     "Description of the location that provides useful, quality information. Should not be a duplicate of stop_name."}
    {:field-name "stop_lat",
     :type "Latitude",
     :presence "Conditionally Required",
     :description
     "Latitude of the location.For stops/platforms (location_type=0) and boarding area (location_type=4), the coordinates must be the ones of the bus pole — if exists — and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops).",
     :presence-conditions
     {:required
      "for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).",
      :optional
      "for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."}}
    {:field-name "stop_lon",
     :type "Longitude",
     :presence "Conditionally Required",
     :description
     "Longitude of the location.For stops/platforms (location_type=0) and boarding area (location_type=4), the coordinates must be the ones of the bus pole — if exists — and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops).",
     :presence-conditions
     {:required
      "for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).",
      :optional
      "for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."}}
    {:field-name "zone_id",
     :type "ID",
     :presence "Conditionally Required",
     :description
     "Identifies the fare zone for a stop. If this record represents a station or station entrance, the zone_id is ignored.",
     :presence-conditions
     {:required "if providing fare information using fare_rules.txt",
      :optional "otherwise."}}
    {:field-name "stop_url",
     :type "URL",
     :presence "Optional",
     :description
     "URL of a web page about the location. This should be different from the agency.agency_url and the routes.route_url field values."}
    {:field-name "location_type",
     :type "Enum",
     :presence "Optional",
     :description "Location type.",
     :values
     {0
      "Stop (or Platform). A location where passengers board or disembark from a transit vehicle. Is called a platform when defined within a parent_station.",
      nil
      "Stop (or Platform). A location where passengers board or disembark from a transit vehicle. Is called a platform when defined within a parent_station.",
      1
      "Station. A physical structure or area that contains one or more platform.",
      2
      "Entrance/Exit. A location where passengers can enter or exit a station from the street. If an entrance/exit belongs to multiple stations, it may be linked by pathways to both, but the data provider must pick one of them as parent.",
      3
      "Generic Node. A location within a station, not matching any other location_type, that may be used to link together pathways define in pathways.txt.",
      4
      "Boarding Area. A specific location on a platform, where passengers can board and/or alight vehicles."}}
    {:field-name "parent_station",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Conditionally Required",
     :description
     "Defines hierarchy between the different locations defined in stops.txt. It contains the ID of the parent location, as followed:- Stop/platform (location_type=0): the parent_station field contains the ID of a station.- Station (location_type=1): this field must be empty.- Entrance/exit (location_type=2) or generic node (location_type=3): the parent_station field contains the ID of a station (location_type=1)- Boarding Area (location_type=4): the parent_station field contains ID of a platform.",
     :presence-conditions
     {:required
      "for locations which are entrances (location_type=2), generic nodes (location_type=3) or boarding areas (location_type=4).",
      :optional "for stops/platforms (location_type=0).",
      :forbidden "for stations (location_type=1)."},
     :references "stops.stop_id"}
    {:field-name "stop_timezone",
     :type "Timezone",
     :presence "Optional",
     :description
     "Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own. Stations and parentless stops with empty stop_timezone inherit the timezone specified by agency.agency_timezone. If stop_timezone values are provided, the times in stop_times.txt should be entered as the time since midnight in the timezone specified by agency.agency_timezone. This ensures that the time values in a trip always increase over the course of a trip, regardless of which timezones the trip crosses."}
    {:field-name "wheelchair_boarding",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates whether wheelchair boardings are possible from the location.",
     :values
     {:parentless-stops
      {0 "No accessibility information for the stop.",
       nil "No accessibility information for the stop.",
       1
       "Some vehicles at this stop can be boarded by a rider in a wheelchair.",
       2 "Wheelchair boarding is not possible at this stop."},
      :child-stops
      {0
       "Stop will inherit its wheelchair_boarding behavior from the parent station, if specified in the parent.",
       nil
       "Stop will inherit its wheelchair_boarding behavior from the parent station, if specified in the parent.",
       1
       "There exists some accessible path from outside the station to the specific stop/platform.",
       2
       "There exists no accessible path from outside the station to the specific stop/platform."},
      :station-entrances-and-exits
      {0
       "Station entrance will inherit its wheelchair_boarding behavior from the parent station, if specified for the parent.",
       nil
       "Station entrance will inherit its wheelchair_boarding behavior from the parent station, if specified for the parent.",
       1 "Station entrance is wheelchair accessible.",
       2
       "No accessible path from station entrance to stops/platforms."}}}
    {:field-name "level_id",
     :type "Foreign ID referencing levels.level_id",
     :presence "Optional",
     :description
     "Level of the location. The same level may be used by multiple unlinked stations.",
     :references "levels.level_id"}
    {:field-name "platform_code",
     :type "Text",
     :presence "Optional",
     :description
     "Platform identifier for a platform stop (a stop belonging to a station). This should be just the platform identifier (eg. \"G\" or \"3\"). Words like “platform” or \"track\" (or the feed’s language-specific equivalent) should not be included. This allows feed consumers to more easily internationalize and localize the platform identifier into other languages."})}
  {:file-name "routes.txt",
   :primary-key ["route_id"],
   :fields
   ({:field-name "route_id",
     :type "Unique ID",
     :presence "Required",
     :description "Identifies a route.",
     :unique true}
    {:field-name "agency_id",
     :type "Foreign ID referencing agency.agency_id",
     :presence "Conditionally Required",
     :description "Agency for the specified route.",
     :presence-conditions
     {:required "if multiple agencies are defined in agency.txt.",
      :optional "otherwise."},
     :references "agency.agency_id"}
    {:field-name "route_short_name",
     :type "Text",
     :presence "Conditionally Required",
     :description
     "Short name of a route. Often a short, abstract identifier (e.g., \"32\", \"100X\", \"Green\") that riders use to identify a route. Both route_short_name and route_long_name may be defined.",
     :presence-conditions
     {:required "if routes.route_long_name is empty.",
      :optional "otherwise."}}
    {:field-name "route_long_name",
     :type "Text",
     :presence "Conditionally Required",
     :description
     "Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop. Both route_short_name and route_long_name may be defined.",
     :presence-conditions
     {:required "if routes.route_short_name is empty.",
      :optional "otherwise."}}
    {:field-name "route_desc",
     :type "Text",
     :presence "Optional",
     :description
     "Description of a route that provides useful, quality information. Should not be a duplicate of route_short_name or route_long_name.  Example: \"A\" trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM until about midnight, additional \"A\" trains operate between Inwood-207 St and Lefferts Boulevard (trains typically alternate between Lefferts Blvd and Far Rockaway)."}
    {:field-name "route_type",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates the type of transportation used on a route.",
     :values
     {0
      "Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.",
      7 "Funicular. Any rail system designed for steep inclines.",
      1
      "Subway, Metro. Any underground rail system within a metropolitan area.",
      4 "Ferry. Used for short- and long-distance boat service.",
      6
      "Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.",
      3 "Bus. Used for short- and long-distance bus routes.",
      12
      "Monorail. Railway in which the track consists of a single rail or a beam.",
      2 "Rail. Used for intercity or long-distance travel.",
      11
      "Trolleybus. Electric buses that draw power from overhead wires using poles.",
      5
      "Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle (e.g., cable car in San Francisco)."}}
    {:field-name "route_url",
     :type "URL",
     :presence "Optional",
     :description
     "URL of a web page about the particular route. Should be different from the agency.agency_url value."}
    {:field-name "route_color",
     :type "Color",
     :presence "Optional",
     :description
     "Route color designation that matches public facing material. Defaults to white (FFFFFF) when omitted or left empty. The color difference between route_color and route_text_color should provide sufficient contrast when viewed on a black and white screen."}
    {:field-name "route_text_color",
     :type "Color",
     :presence "Optional",
     :description
     "Legible color to use for text drawn against a background of route_color. Defaults to black (000000) when omitted or left empty. The color difference between route_color and route_text_color should provide sufficient contrast when viewed on a black and white screen."}
    {:field-name "route_sort_order",
     :type "Non-negative integer",
     :presence "Optional",
     :description
     "Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first."}
    {:field-name "continuous_pickup",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates that the rider can board the transit vehicle at any point along the vehicle’s travel path as described by shapes.txt, on every trip of the route. Values for routes.continuous_pickup may be overridden by defining values in stop_times.continuous_pickup for specific stop_times along the route.",
     :values
     {0 "Continuous stopping pickup.",
      1 "No continuous stopping pickup.",
      nil "No continuous stopping pickup.",
      2 "Must phone agency to arrange continuous stopping pickup.",
      3
      "Must coordinate with driver to arrange continuous stopping pickup."}}
    {:field-name "continuous_drop_off",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates that the rider can alight from the transit vehicle at any point along the vehicle’s travel path as described by shapes.txt, on every trip of the route. Values for routes.continuous_drop_off may be overridden by defining values in stop_times.continuous_drop_off for specific stop_times along the route.",
     :values
     {0 "Continuous stopping drop off.",
      1 "No continuous stopping drop off.",
      nil "No continuous stopping drop off.",
      2 "Must phone agency to arrange continuous stopping drop off.",
      3
      "Must coordinate with driver to arrange continuous stopping drop off."}}
    {:field-name "network_id",
     :type "ID",
     :presence "Optional",
     :description
     "Identifies a group of routes. Multiple rows in routes.txt may have the same network_id."})}
  {:file-name "trips.txt",
   :primary-key ["trip_id"],
   :fields
   ({:field-name "route_id",
     :type "Foreign ID referencing routes.route_id",
     :presence "Required",
     :description "Identifies a route.",
     :references "routes.route_id"}
    {:field-name "service_id",
     :type
     "Foreign ID referencing calendar.service_id or calendar_dates.service_id",
     :presence "Required",
     :description
     "Identifies a set of dates when service is available for one or more routes.",
     :references "calendar.service_id or calendar_dates.service_id"}
    {:field-name "trip_id",
     :type "Unique ID",
     :presence "Required",
     :description "Identifies a trip.",
     :unique true}
    {:field-name "trip_headsign",
     :type "Text",
     :presence "Optional",
     :description
     "Text that appears on signage identifying the trip's destination to riders. Should be used to distinguish between different patterns of service on the same route. If the headsign changes during a trip, values for trip_headsign may be overridden by defining values in stop_times.stop_headsign for specific stop_times along the trip."}
    {:field-name "trip_short_name",
     :type "Text",
     :presence "Optional",
     :description
     "Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, trip_short_name should be empty. A trip_short_name value, if provided, should uniquely identify a trip within a service day; it should not be used for destination names or limited/express designations."}
    {:field-name "direction_id",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates the direction of travel for a trip. This field should not be used in routing; it provides a way to separate trips by direction when publishing time tables. Example: The trip_headsign and direction_id fields may be used together to assign a name to travel in each direction for a set of trips. A trips.txt file could contain these records for use in time tables:  trip_id,...,trip_headsign,direction_id  1234,...,Airport,0  1505,...,Downtown,1",
     :values
     {0 "Travel in one direction (e.g. outbound travel).",
      1 "Travel in the opposite direction (e.g. inbound travel)."}}
    {:field-name "block_id",
     :type "ID",
     :presence "Optional",
     :description
     "Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and block_id. A block_id may have trips with different service days, making distinct blocks. See the example below. To provide in-seat transfers information, transfers of transfer_type 4 should be provided instead."}
    {:field-name "shape_id",
     :type "Foreign ID referencing shapes.shape_id",
     :presence "Conditionally Required",
     :description
     "Identifies a geospatial shape describing the vehicle travel path for a trip.",
     :presence-conditions
     {:required "if the trip has a continuous pickup or drop",
      :optional "otherwise."},
     :references "shapes.shape_id"}
    {:field-name "wheelchair_accessible",
     :type "Enum",
     :presence "Optional",
     :description "Indicates wheelchair accessibility.",
     :values
     {0 "No accessibility information for the trip.",
      nil "No accessibility information for the trip.",
      1
      "Vehicle being used on this particular trip can accommodate at least one rider in a wheelchair.",
      2 "No riders in wheelchairs can be accommodated on this trip."}}
    {:field-name "bikes_allowed",
     :type "Enum",
     :presence "Optional",
     :description "Indicates whether bikes are allowed.",
     :values
     {0 "No bike information for the trip.",
      nil "No bike information for the trip.",
      1
      "Vehicle being used on this particular trip can accommodate at least one bicycle.",
      2 "No bicycles are allowed on this trip."}})}
  {:file-name "stop_times.txt",
   :primary-key ["trip_id" "stop_sequence"],
   :fields
   ({:field-name "trip_id",
     :type "Foreign ID referencing trips.trip_id",
     :presence "Required",
     :description "Identifies a trip.",
     :references "trips.trip_id"}
    {:field-name "arrival_time",
     :type "Time",
     :presence "Conditionally Required",
     :description
     "Arrival time at the stop (defined by stop_times.stop_id) for a specific trip (defined by stop_times.trip_id). If there are not separate times for arrival and departure at a stop, arrival_time and departure_time should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If exact arrival and departure times (timepoint=1 or empty) are not available, estimated or interpolated arrival and departure times (timepoint=0) should be provided.",
     :presence-conditions
     {:required
      "for the first and last stop in a trip (defined by stop_times.stop_sequence). for timepoint=1.",
      :optional "otherwise."}}
    {:field-name "departure_time",
     :type "Time",
     :presence "Conditionally Required",
     :description
     "Departure time from the stop (defined by stop_times.stop_id) for a specific trip (defined by stop_times.trip_id).If there are not separate times for arrival and departure at a stop, arrival_time and departure_time should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If exact arrival and departure times (timepoint=1 or empty) are not available, estimated or interpolated arrival and departure times (timepoint=0) should be provided.",
     :presence-conditions
     {:required "for timepoint=1.", :optional "otherwise."}}
    {:field-name "stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Required",
     :description
     "Identifies the serviced stop. All stops serviced during a trip must have a record in stop_times.txt. Referenced locations must be stops/platforms, i.e. their stops.location_type value must be 0 or empty. A stop may be serviced multiple times in the same trip, and multiple trips and routes may service the same stop.",
     :references "stops.stop_id"}
    {:field-name "stop_sequence",
     :type "Non-negative integer",
     :presence "Required",
     :description
     "Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.Example: The first location on the trip could have a stop_sequence=1, the second location on the trip could have a stop_sequence=23, the third location could have a stop_sequence=40, and so on."}
    {:field-name "stop_headsign",
     :type "Text",
     :presence "Optional",
     :description
     "Text that appears on signage identifying the trip's destination to riders. This field overrides the default trips.trip_headsign when the headsign changes between stops. If the headsign is displayed for an entire trip, trips.trip_headsign should be used instead.   A stop_headsign value specified for one stop_time does not apply to subsequent stop_times in the same trip. If you want to override the trip_headsign for multiple stop_times in the same trip, the stop_headsign value must be repeated in each stop_time row."}
    {:field-name "pickup_type",
     :type "Enum",
     :presence "Optional",
     :description "Indicates pickup method.",
     :values
     {0 "Regularly scheduled pickup.",
      nil "Regularly scheduled pickup.",
      1 "No pickup available.",
      2 "Must phone agency to arrange pickup.",
      3 "Must coordinate with driver to arrange pickup."}}
    {:field-name "drop_off_type",
     :type "Enum",
     :presence "Optional",
     :description "Indicates drop off method.",
     :values
     {0 "Regularly scheduled drop off.",
      nil "Regularly scheduled drop off.",
      1 "No drop off available.",
      2 "Must phone agency to arrange drop off.",
      3 "Must coordinate with driver to arrange drop off."}}
    {:field-name "continuous_pickup",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates that the rider can board the transit vehicle at any point along the vehicle’s travel path as described by shapes.txt, from this stop_time to the next stop_time in the trip’s stop_sequence. If this field is populated, it overrides any continuous pickup behavior defined in routes.txt. If this field is empty, the stop_time inherits any continuous pickup behavior defined in routes.txt.",
     :values
     {0 "Continuous stopping pickup.",
      1 "No continuous stopping pickup.",
      nil "No continuous stopping pickup.",
      2 "Must phone agency to arrange continuous stopping pickup.",
      3
      "Must coordinate with driver to arrange continuous stopping pickup."}}
    {:field-name "continuous_drop_off",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates that the rider can alight from the transit vehicle at any point along the vehicle’s travel path as described by shapes.txt, from this stop_time to the next stop_time in the trip’s stop_sequence. If this field is populated, it overrides any continuous drop-off behavior defined in routes.txt. If this field is empty, the stop_time inherits any continuous drop-off behavior defined in routes.txt.",
     :values
     {0 "Continuous stopping drop off.",
      1 "No continuous stopping drop off.",
      nil "No continuous stopping drop off.",
      2 "Must phone agency to arrange continuous stopping drop off.",
      3
      "Must coordinate with driver to arrange continuous stopping drop off."}}
    {:field-name "shape_dist_traveled",
     :type "Non-negative float",
     :presence "Optional",
     :description
     "Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in shapes.txt. Values used for shape_dist_traveled must increase along with stop_sequence; they must not be used to show reverse travel along a route.Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,shape_dist_traveled=5.25."}
    {:field-name "timepoint",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate.",
     :values
     {0 "Times are considered approximate.",
      1 "Times are considered exact.",
      nil "Times are considered exact."}})}
  {:file-name "calendar.txt",
   :primary-key ["service_id"],
   :fields
   ({:field-name "service_id",
     :type "Unique ID",
     :presence "Required",
     :description
     "Identifies a set of dates when service is available for one or more routes. Each service_id value must be unique in a calendar.txt file.",
     :unique true}
    {:field-name "monday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Mondays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Mondays in the date range.",
      0 "Service is not available for Mondays in the date range."}}
    {:field-name "tuesday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Tuesdays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Tuesdays in the date range.",
      0 "Service is not available for Tuesdays in the date range."}}
    {:field-name "wednesday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Wednesdays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Wednesdays in the date range.",
      0 "Service is not available for Wednesdays in the date range."}}
    {:field-name "thursday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Thursdays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Thursdays in the date range.",
      0 "Service is not available for Thursdays in the date range."}}
    {:field-name "friday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Fridays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Fridays in the date range.",
      0 "Service is not available for Fridays in the date range."}}
    {:field-name "saturday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Saturdays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Saturdays in the date range.",
      0 "Service is not available for Saturdays in the date range."}}
    {:field-name "sunday",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether the service operates on all Sundays in the date range specified by the start_date and end_date fields. Note that exceptions for particular dates may be listed in calendar_dates.txt.",
     :values
     {1 "Service is available for all Sundays in the date range.",
      0 "Service is not available for Sundays in the date range."}}
    {:field-name "start_date",
     :type "Date",
     :presence "Required",
     :description "Start service day for the service interval."}
    {:field-name "end_date",
     :type "Date",
     :presence "Required",
     :description
     "End service day for the service interval. This service day is included in the interval."})}
  {:file-name "calendar_dates.txt",
   :primary-key ["service_id" "date"],
   :fields
   ({:field-name "service_id",
     :type "Foreign ID referencing calendar.service_id or ID",
     :presence "Required",
     :description
     "Identifies a set of dates when a service exception occurs for one or more routes. Each (service_id, date) pair may only appear once in calendar_dates.txt if using calendar.txt and calendar_dates.txt in conjunction. If a service_id value appears in both calendar.txt and calendar_dates.txt, the information in calendar_dates.txt modifies the service information specified in calendar.txt.",
     :references "calendar.service_id or ID"}
    {:field-name "date",
     :type "Date",
     :presence "Required",
     :description "Date when service exception occurs."}
    {:field-name "exception_type",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates whether service is available on the date specified in the date field. Example: Suppose a route has one set of trips available on holidays and another set of trips available on all other days. One service_id could correspond to the regular service schedule and another service_id could correspond to the holiday schedule. For a particular holiday, the calendar_dates.txt file could be used to add the holiday to the holiday service_id and to remove the holiday from the regular service_id schedule.",
     :values
     {1 "Service has been added for the specified date.",
      2 "Service has been removed for the specified date."}})}
  {:file-name "fare_attributes.txt",
   :primary-key ["fare_id"],
   :fields
   ({:field-name "fare_id",
     :type "Unique ID",
     :presence "Required",
     :description "Identifies a fare class.",
     :unique true}
    {:field-name "price",
     :type "Non-negative float",
     :presence "Required",
     :description
     "Fare price, in the unit specified by currency_type."}
    {:field-name "currency_type",
     :type "Currency code",
     :presence "Required",
     :description "Currency used to pay the fare."}
    {:field-name "payment_method",
     :type "Enum",
     :presence "Required",
     :description "Indicates when the fare must be paid.",
     :values
     {0 "Fare is paid on board.",
      1 "Fare must be paid before boarding."}}
    {:field-name "transfers",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates the number of transfers permitted on this fare.",
     :values
     {0 "No transfers permitted on this fare.",
      1 "Riders may transfer once.",
      2
      "Riders may transfer twice.empty - Unlimited transfers are permitted."}}
    {:field-name "agency_id",
     :type "Foreign ID referencing agency.agency_id",
     :presence "Conditionally Required",
     :description "Identifies the relevant agency for a fare.",
     :presence-conditions
     {:required "if multiple agencies are defined in agency.txt.",
      :optional "otherwise."},
     :references "agency.agency_id"}
    {:field-name "transfer_duration",
     :type "Non-negative integer",
     :presence "Optional",
     :description
     "Length of time in seconds before a transfer expires. When transfers=0 this field may be used to indicate how long a ticket is valid for or it may be left empty."})}
  {:file-name "fare_rules.txt",
   :primary-key
   ["fare_id" "route_id" "origin_id" "destination_id" "contains_id"],
   :fields
   ({:field-name "fare_id",
     :type "Foreign ID referencing fare_attributes.fare_id",
     :presence "Required",
     :description "Identifies a fare class.",
     :references "fare_attributes.fare_id"}
    {:field-name "route_id",
     :type "Foreign ID referencing routes.route_id",
     :presence "Optional",
     :description
     "Identifies a route associated with the fare class. If several routes with the same fare attributes exist, create a record in fare_rules.txt for each route.Example: If fare class \"b\" is valid on route \"TSW\" and \"TSE\", the fare_rules.txt file would contain these records for the fare class:  fare_id,route_idb,TSW  b,TSE",
     :references "routes.route_id"}
    {:field-name "origin_id",
     :type "Foreign ID referencing stops.zone_id",
     :presence "Optional",
     :description
     "Identifies an origin zone. If a fare class has multiple origin zones, create a record in fare_rules.txt for each origin_id.Example: If fare class \"b\" is valid for all travel originating from either zone \"2\" or zone \"8\", the fare_rules.txt file would contain these records for the fare class:  fare_id,...,origin_id  b,...,2   b,...,8",
     :references "stops.zone_id"}
    {:field-name "destination_id",
     :type "Foreign ID referencing stops.zone_id",
     :presence "Optional",
     :description
     "Identifies a destination zone. If a fare class has multiple destination zones, create a record in fare_rules.txt for each destination_id.Example: The origin_id and destination_id fields could be used together to specify that fare class \"b\" is valid for travel between zones 3 and 4, and for travel between zones 3 and 5, the fare_rules.txt file would contain these records for the fare class: fare_id,...,origin_id,destination_id b,...,3,4 b,...,3,5",
     :references "stops.zone_id"}
    {:field-name "contains_id",
     :type "Foreign ID referencing stops.zone_id",
     :presence "Optional",
     :description
     "Identifies the zones that a rider will enter while using a given fare class. Used in some systems to calculate correct fare class. Example: If fare class \"c\" is associated with all travel on the GRT route that passes through zones 5, 6, and 7 the fare_rules.txt would contain these records:  fare_id,route_id,...,contains_id   c,GRT,...,5 c,GRT,...,6 c,GRT,...,7  Because all contains_id zones must be matched for the fare to apply, an itinerary that passes through zones 5 and 6 but not zone 7 would not have fare class \"c\". For more detail, see https://code.google.com/p/googletransitdatafeed/wiki/FareExamples in the GoogleTransitDataFeed project wiki.",
     :references "stops.zone_id"})}
  {:file-name "fare_products.txt",
   :primary-key nil,
   :fields
   ({:field-name "fare_product_id",
     :type "ID",
     :presence "Required",
     :description "Identifies a fare product."}
    {:field-name "fare_product_name",
     :type "Text",
     :presence "Optional",
     :description
     "The name of the fare product as displayed to riders."}
    {:field-name "amount",
     :type "Currency amount",
     :presence "Required",
     :description
     "The cost of the fare product. May be negative to represent transfer discounts. May be zero to represent a fare product that is free."}
    {:field-name "currency",
     :type "Currency code",
     :presence "Required",
     :description "The currency of the cost of the fare product."})}
  {:file-name "fare_leg_rules.txt",
   :primary-key nil,
   :fields
   ({:field-name "leg_group_id",
     :type "ID",
     :presence "Optional",
     :description
     "Identifies a group of entries in fare_leg_rules.txt. Used to describe fare transfer rules between fare_transfer_rules.from_leg_group_id and fare_transfer_rules.to_leg_group_id.Multiple entries in fare_leg_rules.txt may belong to the same fare_leg_rules.leg_group_id.The same entry in fare_leg_rules.txt (not including fare_leg_rules.leg_group_id) must not belong to multiple fare_leg_rules.leg_group_id."}
    {:field-name "network_id",
     :type "Foreign ID referencing routes.network_id",
     :presence "Optional",
     :description
     "Identifies a route network that applies for the fare leg rule.If there are no matching fare_leg_rules.network_id values to the network_id being filtered, empty fare_leg_rules.network_id will be matched by default. An empty entry in fare_leg_rules.network_id corresponds to all networks defined in routes.txt excluding the ones listed under fare_leg_rules.network_id",
     :references "routes.network_id"}
    {:field-name "from_area_id",
     :type "Foreign ID referencing areas.area_id",
     :presence "Optional",
     :description
     "Identifies a departure area.If there are no matching fare_leg_rules.from_area_id values to the area_id being filtered, empty fare_leg_rules.from_area_id will be matched by default. An empty entry in fare_leg_rules.from_area_id corresponds to all areas defined in areas.area_id excluding the ones listed under fare_leg_rules.from_area_id",
     :references "areas.area_id"}
    {:field-name "to_area_id",
     :type "Foreign ID referencing areas.area_id",
     :presence "Optional",
     :description
     "Identifies an arrival area.If there are no matching fare_leg_rules.to_area_id values to the area_id being filtered, empty fare_leg_rules.to_area_id will be matched by default. An empty entry in fare_leg_rules.to_area_id corresponds to all areas defined in areas.area_id excluding the ones listed under fare_leg_rules.to_area_id",
     :references "areas.area_id"}
    {:field-name "fare_product_id",
     :type "Foreign ID referencing fare_products.fare_product_id",
     :presence "Required",
     :description "The fare product required to travel the leg.",
     :references "fare_products.fare_product_id"})}
  {:file-name "fare_transfer_rules.txt",
   :primary-key nil,
   :fields
   ({:field-name "from_leg_group_id",
     :type "Foreign ID referencing fare_leg_rules.leg_group_id",
     :presence "Optional",
     :description
     "Identifies a group of pre-transfer fare leg rules.If there are no matching fare_transfer_rules.from_leg_group_id values to the leg_group_id being filtered, empty fare_transfer_rules.from_leg_group_id will be matched by default. An empty entry in fare_transfer_rules.from_leg_group_id corresponds to all leg groups defined under fare_leg_rules.leg_group_id excluding the ones listed under fare_transfer_rules.from_leg_group_id",
     :references "fare_leg_rules.leg_group_id"}
    {:field-name "to_leg_group_id",
     :type "Foreign ID referencing fare_leg_rules.leg_group_id",
     :presence "Optional",
     :description
     "Identifies a group of post-transfer fare leg rules.If there are no matching fare_transfer_rules.to_leg_group_id values to the leg_group_id being filtered, empty fare_transfer_rules.to_leg_group_id will be matched by default.An empty entry in fare_transfer_rules.to_leg_group_id corresponds to all leg groups defined under fare_leg_rules.leg_group_id excluding the ones listed under fare_transfer_rules.to_leg_group_id",
     :references "fare_leg_rules.leg_group_id"}
    {:field-name "transfer_count",
     :type "Non-zero integer",
     :presence "Conditionally Forbidden",
     :description
     "Defines how many consecutive transfers the transfer rule may be applied to.Valid options are:-1 - No limit.1 or more - Defines how many transfers the transfer rule may span.If a sub-journey matches multiple records with different transfer_counts, then the rule with the minimum transfer_count that is greater than or equal to the current transfer count of the sub-journey is to be selected.",
     :presence-conditions
     {:forbidden
      "if fare_transfer_rules.from_leg_group_id does not equal fare_transfer_rules.to_leg_group_id.",
      :required
      "if fare_transfer_rules.from_leg_group_id equals fare_transfer_rules.to_leg_group_id."}}
    {:field-name "duration_limit",
     :type "Positive integer",
     :presence "Optional",
     :description
     "Defines the duration limit of the transfer.Must be expressed in integer increments of seconds.If there is no duration limit, fare_transfer_rules.duration_limit must be empty."}
    {:field-name "duration_limit_type",
     :type "Enum",
     :presence "Conditionally Required",
     :description
     "Defines the relative start and end of fare_transfer_rules.duration_limit.",
     :presence-conditions
     {:required "if fare_transfer_rules.duration_limit is defined.",
      :forbidden "if fare_transfer_rules.duration_limit is empty."},
     :values
     {0
      "Between the departure fare validation of the current leg and the arrival fare validation of the next leg.",
      1
      "Between the departure fare validation of the current leg and the departure fare validation of the next leg.",
      2
      "Between the arrival fare validation of the current leg and the departure fare validation of the next leg.",
      3
      "Between the arrival fare validation of the current leg and the arrival fare validation of the next leg."}}
    {:field-name "fare_transfer_type",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates the cost processing method of transferring between legs in a journey:  Cost processing interactions between multiple transfers in a journey:fare_transfer_typeProcessing A > BProcessing B > C0A + ABS + BC1A + AB +BS + BC + C2ABS + BCWhere S indicates the total processed cost of the preceding leg(s) and transfer(s).",
     :values
     {0
      "From-leg fare_leg_rules.fare_product_id plus fare_transfer_rules.fare_product_id; A + AB.",
      1
      "From-leg fare_leg_rules.fare_product_id plus fare_transfer_rules.fare_product_id plus to-leg fare_leg_rules.fare_product_id; A + AB + B.",
      2 "fare_transfer_rules.fare_product_id; AB."}}
    {:field-name "fare_product_id",
     :type "Foreign ID referencing fare_products.fare_product_id",
     :presence "Optional",
     :description
     "The fare product required to transfer between two fare legs. If empty, the cost of the transfer rule is 0.",
     :references "fare_products.fare_product_id"})}
  {:file-name "areas.txt",
   :primary-key ["area_id"],
   :fields
   ({:field-name "area_id",
     :type "Unique ID",
     :presence "Required",
     :description "Identifies an area. Must be unique in areas.txt.",
     :unique true}
    {:field-name "area_name",
     :type "Text",
     :presence "Optional",
     :description "The name of the area as displayed to the rider."})}
  {:file-name "stop_areas.txt",
   :primary-key ["area_id" "stop_id"],
   :fields
   ({:field-name "area_id",
     :type "Foreign ID referencing areas.area_id",
     :presence "Required",
     :description
     "Identifies an area to which one or multiple stop_ids belong. The same stop_id may be defined in many area_ids.",
     :references "areas.area_id"}
    {:field-name "stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Required",
     :description
     "Identifies a stop. If a station (i.e. a stop with stops.location_type=1) is defined in this field, it is assumed that all of its platforms (i.e. all stops with stops.location_type=0 that have this station defined as stops.parent_station) are part of the same area. This behavior can be overridden by assigning platforms to other areas.",
     :references "stops.stop_id"})}
  {:file-name "shapes.txt",
   :primary-key ["shape_id" "shape_pt_sequence"],
   :fields
   ({:field-name "shape_id",
     :type "ID",
     :presence "Required",
     :description "Identifies a shape."}
    {:field-name "shape_pt_lat",
     :type "Latitude",
     :presence "Required",
     :description
     "Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape."}
    {:field-name "shape_pt_lon",
     :type "Longitude",
     :presence "Required",
     :description "Longitude of a shape point."}
    {:field-name "shape_pt_sequence",
     :type "Non-negative integer",
     :presence "Required",
     :description
     "Sequence in which the shape points connect to form the shape. Values must increase along the trip but do not need to be consecutive.Example: If the shape \"A_shp\" has three points in its definition, the shapes.txt file might contain these records to define the shape:  shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence  A_shp,37.61956,-122.48161,0  A_shp,37.64430,-122.41070,6  A_shp,37.65863,-122.30839,11"}
    {:field-name "shape_dist_traveled",
     :type "Non-negative float",
     :presence "Optional",
     :description
     "Actual distance traveled along the shape from the first shape point to the point specified in this record. Used by trip planners to show the correct portion of the shape on a map. Values must increase along with shape_pt_sequence; they must not be used to show reverse travel along a route. Distance units must be consistent with those used in stop_times.txt.Example: If a bus travels along the three points defined above for A_shp, the additional shape_dist_traveled values (shown here in kilometers) would look like this:  shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveled  A_shp,37.61956,-122.48161,0,0A_shp,37.64430,-122.41070,6,6.8310  A_shp,37.65863,-122.30839,11,15.8765"})}
  {:file-name "frequencies.txt",
   :primary-key ["trip_id" "start_time"],
   :fields
   ({:field-name "trip_id",
     :type "Foreign ID referencing trips.trip_id",
     :presence "Required",
     :description
     "Identifies a trip to which the specified headway of service applies.",
     :references "trips.trip_id"}
    {:field-name "start_time",
     :type "Time",
     :presence "Required",
     :description
     "Time at which the first vehicle departs from the first stop of the trip with the specified headway."}
    {:field-name "end_time",
     :type "Time",
     :presence "Required",
     :description
     "Time at which service changes to a different headway (or ceases) at the first stop in the trip."}
    {:field-name "headway_secs",
     :type "Positive integer",
     :presence "Required",
     :description
     "Time, in seconds, between departures from the same stop (headway) for the trip, during the time interval specified by start_time and end_time. Multiple headways may be defined for the same trip, but must not overlap. New headways may start at the exact time the previous headway ends."}
    {:field-name "exact_times",
     :type "Enum",
     :presence "Optional",
     :description
     "Indicates the type of service for a trip. See the file description for more information.",
     :values
     {0 "Frequency-based trips.",
      nil "Frequency-based trips.",
      1
      "Schedule-based trips with the exact same headway throughout the day. In this case the end_time value must be greater than the last desired trip start_time but less than the last desired trip start_time + headway_secs."}})}
  {:file-name "transfers.txt",
   :primary-key
   ["from_stop_id"
    "to_stop_id"
    "from_trip_id"
    "to_trip_id"
    "from_route_id"
    "to_route_id"],
   :fields
   ({:field-name "from_stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Conditionally Required",
     :description
     "Identifies a stop or station where a connection between routes begins. If this field refers to a station, the transfer rule applies to all its child stops. Refering to a station is forbiden for transfer_types 4 and 5.",
     :references "stops.stop_id"}
    {:field-name "to_stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Conditionally Required",
     :description
     "Identifies a stop or station where a connection between routes ends. If this field refers to a station, the transfer rule applies to all child stops. Refering to a station is forbiden for transfer_types 4 and 5.",
     :references "stops.stop_id"}
    {:field-name "from_route_id",
     :type "Foreign ID referencing routes.route_id",
     :presence "Optional",
     :description
     "Identifies a route where a connection begins.If from_route_id is defined, the transfer will apply to the arriving trip on the route for the given from_stop_id.If both from_trip_id and from_route_id are defined, the trip_id must belong to the route_id, and from_trip_id will take precedence.",
     :references "routes.route_id"}
    {:field-name "to_route_id",
     :type "Foreign ID referencing routes.route_id",
     :presence "Optional",
     :description
     "Identifies a route where a connection ends.If to_route_id is defined, the transfer will apply to the departing trip on the route for the given to_stop_id.If both to_trip_id and to_route_id are defined, the trip_id must belong to the route_id, and to_trip_id will take precedence.",
     :references "routes.route_id"}
    {:field-name "from_trip_id",
     :type "Foreign ID referencing trips.trip_id",
     :presence "Conditionally Required",
     :description
     "Identifies a trip where a connection between routes begins.If from_trip_id is defined, the transfer will apply to the arriving trip for the given from_stop_id.If both from_trip_id and from_route_id are defined, the trip_id must belong to the route_id, and from_trip_id will take precedence.",
     :presence-conditions {:required "if transfer_type is 4 or 5."},
     :references "trips.trip_id"}
    {:field-name "to_trip_id",
     :type "Foreign ID referencing trips.trip_id",
     :presence "Conditionally Required",
     :description
     "Identifies a trip where a connection between routes ends.If to_trip_id is defined, the transfer will apply to the departing trip for the given to_stop_id.If both to_trip_id and to_route_id are defined, the trip_id must belong to the route_id, and to_trip_id will take precedence.",
     :presence-conditions {:required "if transfer_type is 4 or 5."},
     :references "trips.trip_id"}
    {:field-name "transfer_type",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates the type of connection for the specified (from_stop_id, to_stop_id) pair.",
     :values
     {0 "Recommended transfer point between routes.",
      nil "Recommended transfer point between routes.",
      1
      "Timed transfer point between two routes. The departing vehicle is expected to wait for the arriving one and leave sufficient time for a rider to transfer between routes.",
      2
      "Transfer requires a minimum amount of time between arrival and departure to ensure a connection. The time required to transfer is specified by min_transfer_time.",
      3 "Transfers are not possible between routes at the location.",
      4
      "Passengers can transfer from one trip to another by staying onboard the same vehicle (an \"in-seat transfer\"). More details about this type of transfer below.",
      5
      "In-seat transfers are not allowed between sequential trips. The passenger must alight from the vehicle and re-board. More details about this type of transfer below."}}
    {:field-name "min_transfer_time",
     :type "Non-negative integer",
     :presence "Optional",
     :description
     "Amount of time, in seconds, that must be available to permit a transfer between routes at the specified stops. The min_transfer_time should be sufficient to permit a typical rider to move between the two stops, including buffer time to allow for schedule variance on each route."})}
  {:file-name "pathways.txt",
   :primary-key ["pathway_id"],
   :fields
   ({:field-name "pathway_id",
     :type "Unique ID",
     :presence "Required",
     :description
     "Identifies a pathway. Used by systems as an internal identifier for the record. Must be unique in the dataset.  Different pathways may have the same values for from_stop_id and to_stop_id.Example: When two escalators are side-by-side in opposite directions, or when a stair set and elevator go from the same place to the same place, different pathway_id may have the same from_stop_id and to_stop_id values.",
     :unique true}
    {:field-name "from_stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Required",
     :description
     "Location at which the pathway begins.Must contain a stop_id that identifies a platform (location_type=0 or empty), entrance/exit (location_type=2), generic node (location_type=3) or boarding area (location_type=4). Values for stop_id that identify stations (location_type=1) are forbidden.",
     :references "stops.stop_id"}
    {:field-name "to_stop_id",
     :type "Foreign ID referencing stops.stop_id",
     :presence "Required",
     :description
     "Location at which the pathway ends.Must contain a stop_id that identifies a platform (location_type=0 or empty), entrance/exit (location_type=2), generic node (location_type=3) or boarding area (location_type=4). Values for stop_id that identify stations (location_type=1) are forbidden.",
     :references "stops.stop_id"}
    {:field-name "pathway_mode",
     :type "Enum",
     :presence "Required",
     :description
     "Type of pathway between the specified (from_stop_id, to_stop_id) pair.",
     :values
     {1 "Walkway.",
      2 "Stairs.",
      3 "Moving sidewalk/travelator.",
      4 "Escalator.",
      5 "Elevator.",
      6
      "Fare gate (or payment gate): A pathway that crosses into an area of the station where proof of payment is required to cross. Fare gates may separate paid areas of the station from unpaid ones, or separate different payment areas within the same station from each other. This information can be used to avoid routing passengers through stations using shortcuts that would require passengers to make unnecessary payments, like directing a passenger to walk through a subway platform to reach a busway.",
      7
      "Exit gate: A pathway exiting a paid area into an unpaid area where proof of payment is not required to cross."}}
    {:field-name "is_bidirectional",
     :type "Enum",
     :presence "Required",
     :description
     "Indicates the direction that the pathway can be taken:0 - Unidirectional pathway that can only be used from from_stop_id to to_stop_id.1 - Bidirectional pathway that can be used in both directions.Exit gates (pathway_mode=7) must not be bidirectional.",
     :values
     {0
      "Unidirectional pathway that can only be used from from_stop_id to to_stop_id.",
      1
      "Bidirectional pathway that can be used in both directions.Exit gates (pathway_mode=7) must not be bidirectional."}}
    {:field-name "length",
     :type "Non-negative float",
     :presence "Optional",
     :description
     "Horizontal length in meters of the pathway from the origin location (defined in from_stop_id) to the destination location (defined in to_stop_id).This field is recommended for walkways (pathway_mode=1), fare gates (pathway_mode=6) and exit gates (pathway_mode=7)."}
    {:field-name "traversal_time",
     :type "Positive integer",
     :presence "Optional",
     :description
     "Average time in seconds needed to walk through the pathway from the origin location (defined in from_stop_id) to the destination location (defined in to_stop_id).This field is recommended for moving sidewalks (pathway_mode=3), escalators (pathway_mode=4) and elevator (pathway_mode=5)."}
    {:field-name "stair_count",
     :type "Non-null integer",
     :presence "Optional",
     :description
     "Number of stairs of the pathway.A positive stair_count implies that the rider walk up from from_stop_id to to_stop_id. And a negative stair_count implies that the rider walk down from from_stop_id to to_stop_id.This field is recommended for stairs (pathway_mode=2).If only an estimated stair count can be provided, it is recommended to approximate 15 stairs for 1 floor."}
    {:field-name "max_slope",
     :type "Float",
     :presence "Optional",
     :description
     "Maximum slope ratio of the pathway. Valid options are:0 or empty - No slope.Float - Slope ratio of the pathway, positive for upwards, negative for downwards.This field should only be used with walkways (pathway_mode=1) and moving sidewalks (pathway_mode=3).Example: In the US, 0.083 (also written 8.3%) is the maximum slope ratio for hand-propelled wheelchair, which mean an increase of 0.083m (so 8.3cm) for each 1m."}
    {:field-name "min_width",
     :type "Positive float",
     :presence "Optional",
     :description
     "Minimum width of the pathway in meters.This field is recommended if the minimum width is less than 1 meter."}
    {:field-name "signposted_as",
     :type "Text",
     :presence "Optional",
     :description
     "Public facing text from physical signage that is visible to riders. May be used to provide text directions to riders, such as 'follow signs to '. The text in singposted_as should appear exactly how it is printed on the signs.When the physical signage is multilingual, this field may be populated and translated following the example of stops.stop_name in the field definition of feed_info.feed_lang."}
    {:field-name "reversed_signposted_as",
     :type "Text",
     :presence "Optional",
     :description
     "Same as signposted_as, but when the pathway is used from the to_stop_id to the from_stop_id."})}
  {:file-name "levels.txt",
   :primary-key ["level_id"],
   :fields
   ({:field-name "level_id",
     :type "Unique ID",
     :presence "Required",
     :description "Identifies a level in a station.",
     :unique true}
    {:field-name "level_index",
     :type "Float",
     :presence "Required",
     :description
     "Numeric index of the level that indicates its relative position. Ground level should have index 0, with levels above ground indicated by positive indices and levels below ground by negative indices."}
    {:field-name "level_name",
     :type "Text",
     :presence "Optional",
     :description
     "Name of the level as seen by the rider inside the building or station.Example: Take the elevator to \"Mezzanine\" or \"Platform\" or \"-1\"."})}
  {:file-name "translations.txt",
   :primary-key
   ["table_name"
    "field_name"
    "language"
    "record_id"
    "record_sub_id"
    "field_value"],
   :fields
   ({:field-name "table_name",
     :type "Enum",
     :presence "Required",
     :description
     "Defines the table that contains the field to be translated. Any file added to GTFS will have a table_name value equivalent to the file name, as listed above (i.e., not including the .txt file extension).",
     :values
     {"agency" nil,
      "stops" nil,
      "routes" nil,
      "trips" nil,
      "stop_times" nil,
      "pathways" nil,
      "levels" nil,
      "feed_info" nil,
      "attributions" nil}}
    {:field-name "field_name",
     :type "Text",
     :presence "Required",
     :description
     "Name of the field to be translated. Fields with type Text may be translated, fields with type URL, Email and Phone number may also be “translated” to provide resources in the correct language. Fields with other types should not be translated."}
    {:field-name "language",
     :type "Language code",
     :presence "Required",
     :description
     "Language of translation.If the language is the same as in feed_info.feed_lang, the original value of the field will be assumed to be the default value to use in languages without specific translations (if default_lang doesn't specify otherwise).Example: In Switzerland, a city in an officially bilingual canton is officially called “Biel/Bienne”, but would simply be called “Bienne” in French and “Biel” in German."}
    {:field-name "translation",
     :type "Text or URL or Email or Phone number",
     :presence "Required",
     :description "Translated value."}
    {:field-name "record_id",
     :type "Foreign ID",
     :presence "Conditionally Required",
     :description
     "Defines the record that corresponds to the field to be translated. The value in record_id must be the first or only field of a table's primary key, as defined in the primary key attribute for each table and below:- agency_id for agency.txt- stop_id for stops.txt;- route_id for routes.txt;- trip_id for trips.txt;- trip_id for stop_times.txt;- pathway_id for pathways.txt;- level_id for levels.txt;- attribution_id for attribution.txt.Fields in tables not defined above should not be translated. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may be translated. Below is the recommended way to use record_id for those tables:- service_id for calendar.txt;- service_id for calendar_dates.txt;- fare_id for fare_attributes.txt;- fare_id for fare_rules.txt;- shape_id for shapes.txt;- trip_id for frequencies.txt;- from_stop_id for transfers.txt.",
     :presence-conditions
     {:forbidden
      "if table_name is feed_info. if field_value is defined.",
      :required "if field_value is empty."}}
    {:field-name "record_sub_id",
     :type "Foreign ID",
     :presence "Conditionally Required",
     :description
     "Helps the record that contains the field to be translated when the table doesn’t have a unique ID. Therefore, the value in record_sub_id is the secondary ID of the table, as defined by the table below:- None for agency.txt;- None for stops.txt;- None for routes.txt;- None for trips.txt;- stop_sequence for stop_times.txt;- None for pathways.txt;- None for levels.txt;- None for attributions.txt.Fields in tables not defined above should not be translated. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may be translated. Below is the recommended way to use record_sub_id for those tables:- None for calendar.txt;- date for calendar_dates.txt;- None for fare_attributes.txt;- route_id for fare_rules.txt;- None for shapes.txt;- start_time for frequencies.txt;- to_stop_id for transfers.txt.",
     :presence-conditions
     {:forbidden
      "if table_name is feed_info. if field_value is defined.",
      :required "if table_name=stop_times and record_id is defined."}}
    {:field-name "field_value",
     :type "Text or URL or Email or Phone number",
     :presence "Conditionally Required",
     :description
     "Instead of defining which record should be translated by using record_id and record_sub_id, this field can be used to define the value which should be translated. When used, the translation will be applied when the fields identified by table_name and field_name contains the exact same value defined in field_value.The field must have exactly the value defined in field_value. If only a subset of the value matches field_value, the translation won’t be applied.If two translation rules match the same record (one with field_value, and the other one with record_id), the rule with record_id takes precedence.",
     :presence-conditions
     {:forbidden
      "if table_name is feed_info. if record_id is defined.",
      :required "if record_id is empty."}})}
  {:file-name "feed_info.txt",
   :primary-key [],
   :fields
   ({:field-name "feed_publisher_name",
     :type "Text",
     :presence "Required",
     :description
     "Full name of the organization that publishes the dataset. This may be the same as one of the agency.agency_name values."}
    {:field-name "feed_publisher_url",
     :type "URL",
     :presence "Required",
     :description
     "URL of the dataset publishing organization's website. This may be the same as one of the agency.agency_url values."}
    {:field-name "feed_lang",
     :type "Language code",
     :presence "Required",
     :description
     "Default language used for the text in this dataset. This setting helps GTFS consumers choose capitalization rules and other language-specific settings for the dataset. The file translations.txt can be used if the text needs to be translated into languages other than the default one.The default language may be multilingual for datasets with the original text in multiple languages. In such cases, the feed_lang field should contain the language code mul defined by the norm ISO 639-2, and a translation for each language used in the dataset should be provided in translations.txt. If all the original text in the dataset is in the same language, then mul should not be used.Example: Consider a dataset from a multilingual country like Switzerland, with the original stops.stop_name field populated with stop names in different languages. Each stop name is written according to the dominant language in that stop’s geographic location, e.g. Genève for the French-speaking city of Geneva, Zürich for the German-speaking city of Zurich, and Biel/Bienne for the bilingual city of Biel/Bienne. The dataset feed_lang should be mul and translations would be provided in translations.txt, in German: Genf, Zürich and Biel; in French: Genève, Zurich and Bienne; in Italian: Ginevra, Zurigo and Bienna; and in English: Geneva, Zurich and Biel/Bienne."}
    {:field-name "default_lang",
     :type "Language code",
     :presence "Optional",
     :description
     "Defines the language that should be used when the data consumer doesn’t know the language of the rider. It will often be en (English)."}
    {:field-name "feed_start_date",
     :type "Date",
     :presence "Optional",
     :description
     "The dataset provides complete and reliable schedule information for service in the period from the beginning of the feed_start_date day to the end of the feed_end_date day. Both days may be left empty if unavailable. The feed_end_date date must not precede the feed_start_date date if both are given. It is recommended that dataset providers give schedule data outside this period to advise of likely future service, but dataset consumers should treat it mindful of its non-authoritative status. If feed_start_date or feed_end_date extend beyond the active calendar dates defined in calendar.txt and calendar_dates.txt, the dataset is making an explicit assertion that there is no service for dates within the feed_start_date or feed_end_date range but not included in the active calendar dates."}
    {:field-name "feed_end_date",
     :type "Date",
     :presence "Optional",
     :description "(see above)"}
    {:field-name "feed_version",
     :type "Text",
     :presence "Optional",
     :description
     "String that indicates the current version of their GTFS dataset. GTFS-consuming applications can display this value to help dataset publishers determine whether the latest dataset has been incorporated."}
    {:field-name "feed_contact_email",
     :type "Email",
     :presence "Optional",
     :description
     "Email address for communication regarding the GTFS dataset and data publishing practices. feed_contact_email is a technical contact for GTFS-consuming applications. Provide customer service contact information through agency.txt."}
    {:field-name "feed_contact_url",
     :type "URL",
     :presence "Optional",
     :description
     "URL for contact information, a web-form, support desk, or other tools for communication regarding the GTFS dataset and data publishing practices. feed_contact_url is a technical contact for GTFS-consuming applications. Provide customer service contact information through agency.txt."})}
  {:file-name "attributions.txt",
   :primary-key ["attribution_id"],
   :fields
   ({:field-name "attribution_id",
     :type "Unique ID",
     :presence "Optional",
     :description
     "Identifies an attribution for the dataset or a subset of it. This is mostly useful for translations.",
     :unique true}
    {:field-name "agency_id",
     :type "Foreign ID referencing agency.agency_id",
     :presence "Optional",
     :description
     "Agency to which the attribution applies.If one agency_id, route_id, or trip_id attribution is defined, the other ones must be empty. If none of them is specified, the attribution will apply to the whole dataset.",
     :references "agency.agency_id"}
    {:field-name "route_id",
     :type "Foreign ID referencing routes.route_id",
     :presence "Optional",
     :description
     "Functions in the same way as agency_id except the attribution applies to a route. Multiple attributions may apply to the same route.",
     :references "routes.route_id"}
    {:field-name "trip_id",
     :type "Foreign ID referencing trips.trip_id",
     :presence "Optional",
     :description
     "Functions in the same way as agency_id except the attribution applies to a trip. Multiple attributions may apply to the same trip.",
     :references "trips.trip_id"}
    {:field-name "organization_name",
     :type "Text",
     :presence "Required",
     :description
     "Name of the organization that the dataset is attributed to."}
    {:field-name "is_producer",
     :type "Enum",
     :presence "Optional",
     :description
     "The role of the organization is producer. At least one of the fields is_producer, is_operator, or is_authority should be set at 1.",
     :values
     {0 "Organization doesn’t have this role.",
      nil "Organization doesn’t have this role.",
      1 "Organization does have this role."}}
    {:field-name "is_operator",
     :type "Enum",
     :presence "Optional",
     :description
     "The role of the organization is operator. At least one of the fields is_producer, is_operator, or is_authority should be set at 1.",
     :values
     {0 "Organization doesn’t have this role.",
      nil "Organization doesn’t have this role.",
      1 "Organization does have this role."}}
    {:field-name "is_authority",
     :type "Enum",
     :presence "Optional",
     :description
     "The role of the organization is authority. At least one of the fields is_producer, is_operator, or is_authority should be set at 1.",
     :values
     {0 "Organization doesn’t have this role.",
      nil "Organization doesn’t have this role.",
      1 "Organization does have this role."}}
    {:field-name "attribution_url",
     :type "URL",
     :presence "Optional",
     :description "URL of the organization."}
    {:field-name "attribution_email",
     :type "Email",
     :presence "Optional",
     :description "Email of the organization."}
    {:field-name "attribution_phone",
     :type "Phone number",
     :presence "Optional",
     :description "Phone number of the organization."})})}
